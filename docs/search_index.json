[["leitura-de-arquivos-de-texto.html", "1 Leitura de arquivos de texto 1.1 Diretório de trabalho 1.2 Leitura de arquivos 1.3 Escrita de arquivos", " 1 Leitura de arquivos de texto 1.1 Diretório de trabalho Abaixo são transcritos alguns comandos e métodos para se definir e conhecer o diretório de trabalho, bem como manipular criação e exclusão de pastas e arquivos. Comando Definição setwd() Define diretório de trabalho. getwd() Identifica diretório ativo. dir() Retorna todo o conteúdo do diretório ativo. Ctrl + Shift + h Abre janela de navegação para definir diretório. file.choose() Abre janela de navegação e ao selecionar o arquivo, ele retorna o caminho (diretório). Pode-se usar também dentro do comando, como em read.csv2(file = file.choose()). No RStudio: Ir em Session, Setting Working Directory Equivalente a Ctrl + Shift + h Inserir aspas ’ ’ + Tab entre elas Navegação que pode servir para explorar caminhos. dir.create() Cria uma pasta de trabalho. unlink() Deleta uma pasta, ex. unlink(“some_directory”, recursive = TRUE). file.create() Cria um arquivo no diretório ex. file.create(“text_file.txt”) (docx, csv, etc). file.copy() Copia um arquivo. Ex. file.copy(from = “source_file.txt”, to = “destination_folder”). file.remove() Deleta um arquivo, ex. file.remove(“csv_file.csv”). Pode-se usar também unlink(‘csv_file.csv’). list.files() Lista os arquivos presentes no diretório. Exemplo - list.files() list.files(path = &#39;dados/&#39;, # Caminho do arquivo pattern = &#39;.ods&#39;, # Formato especificado full.names = FALSE, # Somente nome recursive = TRUE, # Pesquisa em subpastas ignore.case = FALSE) # Ignora tamanhos das letras ## [1] &quot;planilha_ods.ods&quot; 1.2 Leitura de arquivos 1.2.1 utils::read.csv2() read.csv = Arquivos separados por vírgula. read.csv2 = Arquivos separados por ponto e vírgula. Os argumentos das funções são os mesmos, por isso o exemplo será dado somente para .csv2 (mais usado) dados &lt;- read.csv2(file = &#39;dados/dados.csv&#39;) head(dados, 5) # Exibir as 5 primeiras linhas dos dados. ## X data code_mn muni faixa casos obitos masc fem ano mes semana pop ## 1 1 2020-01-01 353070 Mogi Guaçu 30 a 39 1 0 0 1 2020 1 1 150713 ## 2 2 2020-01-20 353070 Mogi Guaçu 50 a 59 1 0 1 0 2020 1 3 150713 ## 3 3 2020-01-29 352380 Itobi 30 a 39 1 0 1 0 2020 1 5 7830 ## 4 4 2020-01-30 353050 Mococa 70 a 79 1 0 0 1 2020 1 5 68788 ## 5 5 2020-02-02 353080 Mogi Mirim 40 a 49 1 0 0 1 2020 2 5 92715 Argumentos principais Os argumentos são os mesmos da função read.table(). Argumento Definição file Nome do arquivo que será lido, contendo o caminho do diretório. header Logical. Indica se o arquivo contém os nomes das colunas na primeira linha. sep Tipo de separador de campo. Default é = “;”. dec Tipo de separador de decimal. Default é = “.”. nrows Integer. Número máximo de linhas a serem lidas. skip Integer. Número de linhas que serão puladas antes de iniciar a leitura dos dados. fill Logical. Se TRUE, caso as linhas tenham comprimento desigual, seão adicionados campos em branco. blank.lines.skip Logical. Se TRUE linhas vazias serão ignoradas. stringsAsFactors Logical. Se TRUE os vetores character serão convertidos para factors. Se houver distorção dos caracteres, utilizar FALSE para sem conversão. fileEncoding Character string. Define o encoding que será usado. Ex. fileEnconding = “UTF-8” ou “Latin-1” ou “ISO-8859-1”. skipNull Logical. Se TRUE os nulos (NA) devem ser ignorados. colClasses character. Um vetor de classes referentes as colunas. Valores possíveis são NA (default, quando type.convert é usado), “NULL” (quando a coluna é pulada), um vetor atomico de classes(logical, integer, numeric, complex, character, raw), or “factor”, “Date” or “POSIXct”. 1.2.2 readr::read_csv2() Exemplo 1 dados &lt;- readr::read_csv2(file = &#39;dados/dados.csv&#39;, # Caminho e arquivo col_select = c(2,4:7), # Seleção de colunas guess_max = 1000, # Máximo de linhas utilizadas para adivinhar classes skip_empty_rows = TRUE) # Pular linhas vazias head(dados, 5) ## # A tibble: 5 × 5 ## data muni faixa casos obitos ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2020-01-01 Mogi Guaçu 30 a 39 1 0 ## 2 2020-01-20 Mogi Guaçu 50 a 59 1 0 ## 3 2020-01-29 Itobi 30 a 39 1 0 ## 4 2020-01-30 Mococa 70 a 79 1 0 ## 5 2020-02-02 Mogi Mirim 40 a 49 1 0 Exemplo 2 dados &lt;- readr::read_csv2( file = &#39;dados/dados.csv&#39;, # Caminho e arquivo guess_max = 1000, # Linhas utilizadas para classes skip_empty_rows = TRUE, # Pular linhas vazias skip = 1, # Pular primeira linha col_names = c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;), # Definir nomes das colunas col_select = c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;)) # Selecionar colunas head(dados, 5) ## # A tibble: 5 × 5 ## a b c d e ## &lt;dbl&gt; &lt;date&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 2020-01-01 353070 Mogi Guaçu 30 a 39 ## 2 2 2020-01-20 353070 Mogi Guaçu 50 a 59 ## 3 3 2020-01-29 352380 Itobi 30 a 39 ## 4 4 2020-01-30 353050 Mococa 70 a 79 ## 5 5 2020-02-02 353080 Mogi Mirim 40 a 49 Argumentos principais Argumento Definição file Nome do arquivo que será lido, contendo o caminho do diretório (admite http). Arquivos terminados em .gz, .bz2, .xz, ou .zip serão automaticamente descomprimidos. col_names TRUE ou FALSE ou um vetor tipo caracter com nomes das colunas. Se TRUE, a primeira linha será usada para nomear as colunas. Se FALSE, nomes das colunas serão gerados automaticamente (X1, X2, X3 etc). Se col_names for um vetor com nomes, os valores serão usados como nomes das colunas, mas a primeira linha será considerada no banco (nomes errados), assim, pode-se usar o argumento renomeando as colunas, mas fazendo a leitura sem considerar a primeira linha, com [-1,] ou skip = 1. Colunas sem nome (NA) receberão nomes fictícios. col_types Se for NULL, todos as classes de coluna serão imputadas a partir do máximo de linhas lidas (guess_max) intercaladas por todo o arquivo. Se a imputação falhar, você precisará aumentar o guess_max ou fornecer os tipos corretos você mesmo. As especificações de coluna criadas por list() ou cols() devem conter uma especificação de coluna para cada coluna. Se você quiser ler apenas um subconjunto das colunas, use cols_only(). Para compactar um vetor com as classes, usar as letras c = character, i = integer, n = number, d = double, l = logical, f = factor, D = date, T = date time, t = time, ? = guess. Por padrão, a definição de classe é automática. col_select Colunas a serem incluídas nos resultados, equivale a dplyr::select() para se referir às colunas pelo nome. Use c() ou list() para usar mais de uma expressão de seleção. Embora esse uso seja menos comum, col_select também aceita um índice de coluna numérica. locale A localidade controla os padrões que variam de lugar para lugar. A localidade padrão é centrada nos EUA (como R), mas você pode usar locale() para criar sua própria localidade que controla coisas como o fuso horário padrão, codificação, marca decimal, marca grande e nomes de dia e mês. na Vetor de caracteres de strings para interpretar como valores ausentes. Defina esta opção como character() para indicar que não há valores ausentes. trim_ws Os espaços em branco à esquerda e à direita (espaços e tabulações ASCII) devem ser cortados de cada campo antes de analisá-lo? skip Número de linhas para pular antes de ler os dados. n_max Número máximo de linhas a ler. guess_max Número máximo de linhas a serem usadas para adivinhar os tipos de coluna. show_col_types Se FALSE, não mostre os tipos de coluna adivinhados. Se TRUE sempre mostra os tipos de coluna, mesmo que sejam fornecidos. Se NULL (o padrão) mostrar apenas os tipos de coluna se eles não forem fornecidos explicitamente pelo argumento col_types. skip_empty_rows As linhas em branco devem ser ignoradas completamente? ou seja, se esta opção for TRUE, as linhas em branco não serão representadas. Se for FALSE, eles serão representados por valores NA em todas as colunas. 1.2.3 data.table::fread() Tem a vantagem de realizar a leitura de arquivos grandes de forma rápida. Além disso, tem boa capacidade de identificar automaticamente o separador, encoding e tipos de classes. O resultado padrão é um objeto data.table, mas pode-se mudar para data.frame. Exemplo 1 dados &lt;- data.table::fread(file = &#39;dados/dados.csv&#39;, # Caminho do arquivo select = c(&quot;data&quot;,&quot;muni&quot;,&quot;casos&quot;), # Seleciona colunas colClasses = c(data = &quot;Date&quot;, # Define classes muni = &quot;character&quot;, casos = &quot;integer&quot;), col.names = c(&quot;data.in.sin&quot;, # Renomeia colunas &quot;municipio&quot;, &quot;num_casos&quot;)) head(dados, 5) ## data.in.sin municipio num_casos ## 1: 2020-01-01 Mogi Guaçu 1 ## 2: 2020-01-20 Mogi Guaçu 1 ## 3: 2020-01-29 Itobi 1 ## 4: 2020-01-30 Mococa 1 ## 5: 2020-02-02 Mogi Mirim 1 Argumentos principais Argumento Definição file Nome do arquivo no diretório de trabalho, caminho para o arquivo ou um URL começando http:, etc. Arquivos compactados ‘.gz’ e ‘.bz2’ são suportados se o pacote R.utils estiver instalado. sep O separador entre colunas. nrows Número máximo de linhas a serem lidas. header Logical. Primeria linha é o nome das colunas. na.strings Para ler NA, como NA, defina na.strings=“NA”. Para ler ,, como string em branco ““, defina na.strings=NULL. stringsAsFactors Converter todas as colunas de caracteres em fatores? skip skip &gt;0 ignora as primeiras linhas. skip=“string” procura por “string” no arquivo (por exemplo, uma substring da linha de nomes de coluna) e começa nessa linha (inspirada em read.xls no pacote gdata). select Um vetor de nomes de colunas ou números para manter e eliminar as demais. Pode especificar também tipos da mesma forma que colClasses; ou seja, um vetor de pares colname=type, ou uma lista de pares type=col(s). Em todas as formas de seleção, a ordem em que as colunas são especificadas determina a ordem das colunas no resultado. drop Vetor de nomes de colunas ou números a serem descartados, mantenha o resto. colClasses Pode receber um vetor ou lista nomeado especificando tipos para um subconjunto das colunas por nome. O padrão NULL significa que os tipos são inferidos automaticamente. Ex1 - colClasses = c(“Date”, “character”,“integer”), neste caso as classes vão compor as classes das colunas na ordem posta. Ex2 - colClasses = c(“data” = “Date”, “idade” = “integer”), nesse caso estou indicando as classes somente de algumas variaveis. Funciona também no read.csv2. dec Separador de decimal como em read.csv2. col.names Inserir um vetor de nomes para as colunas se quiser substituir os originais. Se houver alguma coluna original sem título (NA), ela será renomeada automaticamente com “V”+ o numero que corresponde no banco (V1,V2,V3). encoding Default is “unknown”. Outras possíveis opções são “UTF-8” e “Latin-1”. Porém, não é usado para recodificar, em vez disso, permite o manuseio de strings codificadas em sua codificação nativa. strip.white O padrão é TRUE. Retira espaços em branco à esquerda e à direita de campos não citados. Se FALSE, apenas os espaços à direita do cabeçalho serão removidos. fill Logical, o padrão é FALSE. Se TRUE, caso as linhas tenham comprimento desigual, os campos em branco serão preenchidos implicitamente. blank.lines.skip Logical, o padrão é FALSE. Se TRUE, as linhas em branco serão ignoradas. showProgress TRUE exibe o progresso no console se o ETA for maior que 3 segundos. data.table TRUE retorna um data.table (default). FALSE retorna um data.frame. O default para este argumento pode ser modificado com opcões(datatable.fread.datatable=FALSE). nThread Número de threads a serem usados. Experimente para ver o que funciona melhor para seus dados em seu hardware. KeepLeadingZeros Se for TRUE, dados numéricos com zeros à esquerda seão lidos como caracterer, caso contrário, os zeros à esquerda serão removidos e convertidos em numéricos. 1.2.4 readODS::read_ods() Leitura de arquivos no formato .ods do Libre Office, em que le uma planilha individual e retorna um data.frame. Exemplo 1 dados &lt;- readODS::read_ods(path = &#39;dados/planilha_ods.ods&#39;, # Caminho do arquivo col_names = FALSE, # Primeira linha contém nomes das colunas sheet = 1, # Seleção da planilha range = &quot;A7:B14&quot;) # Intervalo para leitura head(dados) ## A B ## 1 113 381 ## 2 29 112 ## 3 23 25 ## 4 29 152 ## 5 87 NA ## 6 40 27 Argumentos principais Argumento Definição path Caminho do arquivo ods. sheet Planilha que será lida. Default e 1. Pode ser o nome da planilha (ex. “semana1”) ou um número correspondente a planilha. col_names Indica se a primeira linha contem os nomes das colunas. skip Número de linhas a pular antes de iniciar a leitura dos dados. formula_as_formula Exibir fórmulas como fórmulas “SUM(A1:A3)” ou como valores “3” ou “8”. range Seleção de retângulo usando intervalo de células semelhante ao Excel, como intervalo = “D12:F15” ou intervalo = “R1C12:R6C15”. O processamento de intervalo de células é tratado pelo pacote cellranger. row_names Indica se o arquivo contém os nomes das linhas na primeira coluna. strings_as_factors Logical. Se variáveis tipo character serão convertidas a fatores. 1.2.5 readxl::read_excel() Leitura de arquivos extensão .xls e xlsx. Exemplo 1 dados &lt;- readxl::read_excel(path = &quot;dados/planilha_xlsx.xlsx&quot;, sheet = 1, col_names = c(&#39;vel&#39;,&#39;dist&#39;), col_types = c(&quot;numeric&quot;,&quot;numeric&quot;), range = &quot;A3:B19&quot;) head(dados, 5) ## # A tibble: 5 × 2 ## vel dist ## &lt;dbl&gt; &lt;dbl&gt; ## 1 72 360 ## 2 68 410 ## 3 NA 255 ## 4 76 239 ## 5 88 209 Argumentos principais Argumento Definição path Caminho para o arquivo xls/xlsx. sheet Planilha a ser lida. Aceita o nome da planilha ou o número correspondente. Default é a primeira planilha. reange Intervalo de células para leitura, ex. “B3:D87” ou “Orçamento!B2:G14”. col_names Se TRUE a primeira linha será usada para nomear as colunas. FALSE o número das colunas será uma sequência automática de X1 a Xn, ou um vetor de nomes para cada coluna. col_types Se NULL os tipos de classes serão adivinhados, senão inserir um vetor indicando as classes “blank”, “numeric”, “date” or “text”. na Valores ausentes. Por default o readxl converte celulas em branco para valores ausentes. Pode-se inserir um valor padrão caso se deseje cobrir os valores ausentes. skip Número de linhas para pular antes de iniciar a leitura dos dados. n_max Número máximo de linhas a serem lidas. guess_max Máximo de linhas utilizados para adivinhar classes das colunas. 1.2.6 foreign::read.dbf() A função le arquivos .dbf como dataframe, convertendo por default campos character em factor. Tem apenas dois argumentos, o file (caminho) e o as.is (se FALSE não converte os campos em factor). Por não ser muito usado, o desenvolvedor já alerta que nem todos os arquivos poderão ser lidos normalmente. Exemplo dados &lt;- foreign::read.dbf(file = &#39;dados/planilha_dbf.dbf&#39;) head(dados, 5) ## peso altura ## 1 222 160 ## 2 132 164 ## 3 137 169 ## 4 63 209 ## 5 223 166 1.2.7 Arquivos da web Pode-se usar o endereço do apresentado no navegador ou contido nas propriedades (clicar com botão direito). O endereço deverá ser inserido entre aspas nos argumentos file ou path da maioria das funções de leitura, como no exemplo abaixo: read.csv2(file = ‘https://raw.githubusercontent.com/seade-R/dados-covid-sp/master/data/dados_covid_sp.csv’) Ou atribuir o link à um objeto e usa-lo na função. link &lt;- ‘https://raw.githubusercontent.com/seade-R/dados-covid-sp/master/data/dados_covid_sp.csv’ É possível também baixar o arquivo (inclusive imagens) por meio da seguinte função: download.file(url = ‘https://raw.githubusercontent.com/seade-R/dados-covid-sp/master/data/dados_covid_sp.csv’, destfile = ‘dados/baixado_web.csv’) 1.2.8 Encoding Se houver distorção de caracteres especiais, considerar como possibilidades para resolver o problema utilizar o argumento correspondente a stringsAsFactors = F. Esse comando faz com que os caracteres permaneçam como caracteres, ao invés de serem convertidos para factor, e encoding = “UTF-8” ou encoding = “ISO-8859-1” para reconhecer os caracteres especiais. O argumento fileEncoding = “UTF-8” também pode ser necessário. Descobrir o encoding Verifica somente de um vetor stringi::stri_enc_detect(str = cars$speed[1]) ## [[1]] ## Encoding Language Confidence ## 1 UTF-8 0.15 Converter encoding base::iconv(x = cars$speed[1:3], # Dataframe ou vetor from = &quot;UTF-8&quot;, # Encoding anterior to = &quot;ISO-8859-1&quot;) # Novo encoding ## [1] &quot;4&quot; &quot;4&quot; &quot;7&quot; Pode-se também utilizar a função base::enc2utf8 para transformar uma codificação em UTF-8, porém, deve ser sempre aplicado a um vetor (ou coluna do banco) de dados do tipo character, se for preciso, transformar antes com a função base::as.character dados &lt;- base::as.character(iris$Species) dados &lt;- base::enc2utf8(dados) Encoding via Import Dataset É possível controlar o encoding pelos argumentos da função escolhida para leitura do arquivo, ou então pela leitura realizada pela interface gráfica do RStudio. Entrar no menu “File”, “Import Dataset”, “From text (base)…” , após isso será aberta uma janela, onde o campo encoding permite selecionar uma codificação entre centenas. Veja figura abaixo: 1.3 Escrita de arquivos 1.3.1 utils::write.csv2() É possível salvar um arquivo de dados que foi trabalhado no R em diferentes formatos, no caso, separado por ponto e vírgula. Exemplo write.csv2(x = iris, # Dados ativos file = &#39;dados/iris.csv&#39;, # Caminho e nome do arquivo col.names = TRUE, # Nomes das colunas fileEncoding = &quot;UTF-8&quot;) # Encoding read.csv2(&#39;dados/iris.csv&#39;) ## X ...1 Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 1 1 51 35 14 0.2 setosa ## 2 2 2 49 3 14 0.2 setosa ## 3 3 3 47 32 13 0.2 setosa ## 4 4 4 46 31 15 0.2 setosa ## 5 5 5 5 36 14 0.2 setosa ## 6 6 6 54 39 17 0.4 setosa ## 7 7 7 46 34 14 0.3 setosa ## 8 8 8 5 34 15 0.2 setosa ## 9 9 9 44 29 14 0.2 setosa ## 10 10 10 49 31 15 0.1 setosa ## 11 11 11 54 37 15 0.2 setosa ## 12 12 12 48 34 16 0.2 setosa ## 13 13 13 48 3 14 0.1 setosa ## 14 14 14 43 3 11 0.1 setosa ## 15 15 15 58 4 12 0.2 setosa ## 16 16 16 57 44 15 0.4 setosa ## 17 17 17 54 39 13 0.4 setosa ## 18 18 18 51 35 14 0.3 setosa ## 19 19 19 57 38 17 0.3 setosa ## 20 20 20 51 38 15 0.3 setosa ## 21 21 21 54 34 17 0.2 setosa ## 22 22 22 51 37 15 0.4 setosa ## 23 23 23 46 36 1 0.2 setosa ## 24 24 24 51 33 17 0.5 setosa ## 25 25 25 48 34 19 0.2 setosa ## 26 26 26 5 3 16 0.2 setosa ## 27 27 27 5 34 16 0.4 setosa ## 28 28 28 52 35 15 0.2 setosa ## 29 29 29 52 34 14 0.2 setosa ## 30 30 30 47 32 16 0.2 setosa ## 31 31 31 48 31 16 0.2 setosa ## 32 32 32 54 34 15 0.4 setosa ## 33 33 33 52 41 15 0.1 setosa ## 34 34 34 55 42 14 0.2 setosa ## 35 35 35 49 31 15 0.2 setosa ## 36 36 36 5 32 12 0.2 setosa ## 37 37 37 55 35 13 0.2 setosa ## 38 38 38 49 36 14 0.1 setosa ## 39 39 39 44 3 13 0.2 setosa ## 40 40 40 51 34 15 0.2 setosa ## 41 41 41 5 35 13 0.3 setosa ## 42 42 42 45 23 13 0.3 setosa ## 43 43 43 44 32 13 0.2 setosa ## 44 44 44 5 35 16 0.6 setosa ## 45 45 45 51 38 19 0.4 setosa ## 46 46 46 48 3 14 0.3 setosa ## 47 47 47 51 38 16 0.2 setosa ## 48 48 48 46 32 14 0.2 setosa ## 49 49 49 53 37 15 0.2 setosa ## 50 50 50 5 33 14 0.2 setosa ## 51 51 51 7 32 47 1.4 versicolor ## 52 52 52 64 32 45 1.5 versicolor ## 53 53 53 69 31 49 1.5 versicolor ## 54 54 54 55 23 4 1.3 versicolor ## 55 55 55 65 28 46 1.5 versicolor ## 56 56 56 57 28 45 1.3 versicolor ## 57 57 57 63 33 47 1.6 versicolor ## 58 58 58 49 24 33 1.0 versicolor ## 59 59 59 66 29 46 1.3 versicolor ## 60 60 60 52 27 39 1.4 versicolor ## 61 61 61 5 2 35 1.0 versicolor ## 62 62 62 59 3 42 1.5 versicolor ## 63 63 63 6 22 4 1.0 versicolor ## 64 64 64 61 29 47 1.4 versicolor ## 65 65 65 56 29 36 1.3 versicolor ## 66 66 66 67 31 44 1.4 versicolor ## 67 67 67 56 3 45 1.5 versicolor ## 68 68 68 58 27 41 1.0 versicolor ## 69 69 69 62 22 45 1.5 versicolor ## 70 70 70 56 25 39 1.1 versicolor ## 71 71 71 59 32 48 1.8 versicolor ## 72 72 72 61 28 4 1.3 versicolor ## 73 73 73 63 25 49 1.5 versicolor ## 74 74 74 61 28 47 1.2 versicolor ## 75 75 75 64 29 43 1.3 versicolor ## 76 76 76 66 3 44 1.4 versicolor ## 77 77 77 68 28 48 1.4 versicolor ## 78 78 78 67 3 5 1.7 versicolor ## 79 79 79 6 29 45 1.5 versicolor ## 80 80 80 57 26 35 1.0 versicolor ## 81 81 81 55 24 38 1.1 versicolor ## 82 82 82 55 24 37 1.0 versicolor ## 83 83 83 58 27 39 1.2 versicolor ## 84 84 84 6 27 51 1.6 versicolor ## 85 85 85 54 3 45 1.5 versicolor ## 86 86 86 6 34 45 1.6 versicolor ## 87 87 87 67 31 47 1.5 versicolor ## 88 88 88 63 23 44 1.3 versicolor ## 89 89 89 56 3 41 1.3 versicolor ## 90 90 90 55 25 4 1.3 versicolor ## 91 91 91 55 26 44 1.2 versicolor ## 92 92 92 61 3 46 1.4 versicolor ## 93 93 93 58 26 4 1.2 versicolor ## 94 94 94 5 23 33 1.0 versicolor ## 95 95 95 56 27 42 1.3 versicolor ## 96 96 96 57 3 42 1.2 versicolor ## 97 97 97 57 29 42 1.3 versicolor ## 98 98 98 62 29 43 1.3 versicolor ## 99 99 99 51 25 3 1.1 versicolor ## 100 100 100 57 28 41 1.3 versicolor ## 101 101 101 63 33 6 2.5 virginica ## 102 102 102 58 27 51 1.9 virginica ## 103 103 103 71 3 59 2.1 virginica ## 104 104 104 63 29 56 1.8 virginica ## 105 105 105 65 3 58 2.2 virginica ## 106 106 106 76 3 66 2.1 virginica ## 107 107 107 49 25 45 1.7 virginica ## 108 108 108 73 29 63 1.8 virginica ## 109 109 109 67 25 58 1.8 virginica ## 110 110 110 72 36 61 2.5 virginica ## 111 111 111 65 32 51 2.0 virginica ## 112 112 112 64 27 53 1.9 virginica ## 113 113 113 68 3 55 2.1 virginica ## 114 114 114 57 25 5 2.0 virginica ## 115 115 115 58 28 51 2.4 virginica ## 116 116 116 64 32 53 2.3 virginica ## 117 117 117 65 3 55 1.8 virginica ## 118 118 118 77 38 67 2.2 virginica ## 119 119 119 77 26 69 2.3 virginica ## 120 120 120 6 22 5 1.5 virginica ## 121 121 121 69 32 57 2.3 virginica ## 122 122 122 56 28 49 2.0 virginica ## 123 123 123 77 28 67 2.0 virginica ## 124 124 124 63 27 49 1.8 virginica ## 125 125 125 67 33 57 2.1 virginica ## 126 126 126 72 32 6 1.8 virginica ## 127 127 127 62 28 48 1.8 virginica ## 128 128 128 61 3 49 1.8 virginica ## 129 129 129 64 28 56 2.1 virginica ## 130 130 130 72 3 58 1.6 virginica ## 131 131 131 74 28 61 1.9 virginica ## 132 132 132 79 38 64 2.0 virginica ## 133 133 133 64 28 56 2.2 virginica ## 134 134 134 63 28 51 1.5 virginica ## 135 135 135 61 26 56 1.4 virginica ## 136 136 136 77 3 61 2.3 virginica ## 137 137 137 63 34 56 2.4 virginica ## 138 138 138 64 31 55 1.8 virginica ## 139 139 139 6 3 48 1.8 virginica ## 140 140 140 69 31 54 2.1 virginica ## 141 141 141 67 31 56 2.4 virginica ## 142 142 142 69 31 51 2.3 virginica ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 8 rows ] Argumentos principais Argumento Definição x Objeto a ser escrito, prefereincialmente uma matriz ou data.frame. file Nome do arquivo criado (pode conter o caminho) utilizando aspas ” “. append Logical. Se TRUE os dados serão adicionados à última linha de um arquivo já existente, que deve ter o nome descrito em file, se FALSE qualquer arquivo com o nome descrito será sobrescrito. na String usada para valores ausentes nos dados. dec String para definir divisor de decimal, ex. dec = “.”. col.names Logical. Indica se os nomes das colunas de x devem ser escritos junto com x, ou um vetor de caracteres dos nomes das colunas a serem escritos. row.names Logical. Cria coluna com nomes para linhas. fileEncoding String. Declara a codificação a ser usada para que possam ser recodificados à medida que são gravados. 1.3.2 writexl::write_xlsx() Salvar arquivo de dados como Excel, formato .xlsx. "]]
