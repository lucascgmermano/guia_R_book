[["leitura-e-escrita-de-arquivos-de-texto.html", "1 Leitura e escrita de arquivos de texto 1.1 Diretório de trabalho 1.2 Leitura de arquivos 1.3 Escrita de arquivos 1.4 Leitura de múltiplos arquivos 1.5 Escrita de múltiplos arquivos", " 1 Leitura e escrita de arquivos de texto 1.1 Diretório de trabalho Abaixo são transcritos alguns comandos e métodos para se definir e conhecer o diretório de trabalho, criar e excluir pastas e arquivos. Comandos de definição e manipulação de diretórios e arquivos. Comando Definição base::setwd() Define diretório de trabalho. base::getwd() Identifica diretório ativo. base::dir() Retorna todo o conteúdo do diretório ativo. Ctrl + Shift + h Abre janela de navegação para definir diretório. base::file.choose() Abre janela de navegação e ao selecionar o arquivo, ele retorna o caminho (diretório). Pode-se usar também dentro do comando, como em read.csv2(file = file.choose()). No RStudio: Ir em Session, Setting Working Directory Equivalente a Ctrl + Shift + h Inserir aspas ’ ’ + Tab entre elas Navegação que pode servir para explorar caminhos. base::dir.create() Cria uma pasta de trabalho. base::unlink() Deleta uma pasta, ex. unlink(“some_directory”, recursive = TRUE). Aceita um vetor c() para excluir vários arquivos ou pastas. base::file.create() Cria um arquivo no diretório ex. file.create(“text_file.txt”) (docx, csv, etc). base::file.copy() Copia um arquivo. Ex. file.copy(from = “source_file.txt”, to = “destination_folder”). base::file.remove() Deleta um arquivo, ex. file.remove(“csv_file.csv”). Pode-se usar também unlink(‘csv_file.csv’). base::file.rename() Renomear um arquivo. base::list.files() Lista os arquivos presentes no diretório. here::here() Cria um caminho relativo para um arquivo no diretório de trabalho, preferencialmente em um projeto, o que facilita ser reproduzido em diversas máquinas, ex. here(‘arquivos’,‘dados.csv’). É similar ao base::file.path(), cuja sintaxe é a mesma. Exemplo: list.files() list.files(path = &#39;dados/&#39;, # Caminho do arquivo pattern = &#39;.ods&#39;, # Formato especificado full.names = FALSE, # Somente nome recursive = TRUE, # Pesquisa em subpastas ignore.case = FALSE) # Ignora tamanhos das letras 1.2 Leitura de arquivos 1.2.1 utils::read.csv2() Faz a leitura de um arquivo em formado de tabela e cria um data frame a partir dele, com casos como linhas e variáveis como colunas. É uma função nativa do R, em que read.csv trata de arquivos separados por vírgula, enquanto read.csv2 de arquivos separados por ponto e vírgula. Os argumentos das funções são os mesmos, por isso o .csv2 foi escolhido para o exemplo (documentação) Exemplo dados &lt;- read.csv2(file = &#39;dados/dados.csv&#39;) head(dados, 2) # Exibir as 2 primeiras linhas dos dados. Argumentos principais Argumento Definição file Nome do arquivo que será lido, contendo o caminho do diretório. header Logical. Indica se o arquivo contém os nomes das colunas na primeira linha. sep Tipo de separador de campo. Default é = “;”. dec Tipo de separador de decimal. Default é = “.”. nrows Integer. Número máximo de linhas a serem lidas. skip Integer. Número de linhas que serão puladas antes de iniciar a leitura dos dados. fill Logical. Se TRUE, caso as linhas tenham comprimento desigual, seão adicionados campos em branco. blank.lines.skip Logical. Se TRUE linhas vazias serão ignoradas. stringsAsFactors Logical. Se TRUE os vetores character serão convertidos para factors. Se houver distorção dos caracteres, utilizar FALSE para sem conversão. fileEncoding Character string. Define o encoding que será usado. Ex. fileEnconding = “UTF-8” ou “Latin-1” ou “ISO-8859-1”. skipNull Logical. Se TRUE os nulos (NA) devem ser ignorados. colClasses character. Um vetor de classes referentes as colunas. Valores possíveis são NA (default, quando type.convert é usado), “NULL” (quando a coluna é pulada), um vetor atomico de classes(logical, integer, numeric, complex, character, raw), or “factor”, “Date” or “POSIXct”. Os argumentos são os mesmos da função read.table(). 1.2.2 readr::read_csv2() O objetivo do readr é fornecer uma maneira rápida e amigável de ler dados retangulares (como csv, tsv e fwf). Ele foi projetado para analisar de forma flexível muitos tipos de dados encontrados. Já está integrado no RStudio no método de importação via interface gráfica, embora necessite de instalação (Documentação) Exemplo 1 dados &lt;- readr::read_csv2(file = &#39;dados/dados.csv&#39;, # Caminho e arquivo col_select = c(2,4:7), # Seleção de colunas guess_max = 1000, # Máximo de linhas utilizadas para adivinhar classes skip_empty_rows = TRUE) # Pular linhas vazias head(dados, 2) ## # A tibble: 2 × 5 ## data muni faixa casos obitos ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2020-01-01 Mogi Guaçu 30 a 39 1 0 ## 2 2020-01-20 Mogi Guaçu 50 a 59 1 0 Exemplo 2 dados &lt;- readr::read_csv2( file = &#39;dados/dados.csv&#39;, # Caminho e arquivo guess_max = 1000, # Linhas utilizadas para classes col_types = c(X = &quot;double&quot;), # A primeira coluna será double. Um vetor com tipos de classes. skip_empty_rows = TRUE, # Pular linhas vazias skip = 1, # Pular primeira linha col_names = c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;), # Definir nomes das colunas col_select = c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;)) # Selecionar colunas Argumentos principais Argumento Definição file Nome do arquivo que será lido, contendo o caminho do diretório (admite http). Arquivos terminados em .gz, .bz2, .xz, ou .zip serão automaticamente descomprimidos. col_names TRUE ou FALSE ou um vetor tipo caracter com nomes das colunas. Se TRUE, a primeira linha será usada para nomear as colunas. Se FALSE, nomes das colunas serão gerados automaticamente (X1, X2, X3 etc). Se col_names for um vetor com nomes, os valores serão usados como nomes das colunas, mas a primeira linha será considerada no banco (nomes errados), assim, pode-se usar o argumento renomeando as colunas, mas fazendo a leitura sem considerar a primeira linha, com [-1,] ou skip = 1. Colunas sem nome (NA) receberão nomes fictícios. col_types Se for NULL, todos as classes de coluna serão imputadas a partir do máximo de linhas lidas (guess_max) intercaladas por todo o arquivo. Se a imputação falhar, você precisará aumentar o guess_max ou fornecer os tipos corretos você mesmo. As especificações de coluna criadas por list() ou cols() devem conter uma especificação de coluna para cada coluna. Se você quiser ler apenas um subconjunto das colunas, use cols_only(). Para compactar um vetor com as classes, usar as letras c = character, i = integer, n = number, d = double, l = logical, f = factor, D = date, T = date time, t = time, ? = guess. Por padrão, a definição de classe é automática. col_select Colunas a serem incluídas nos resultados, equivale a dplyr::select() para se referir às colunas pelo nome. Use c() ou list() para usar mais de uma expressão de seleção. Embora esse uso seja menos comum, col_select também aceita um índice de coluna numérica. locale A localidade controla os padrões que variam de lugar para lugar. A localidade padrão é centrada nos EUA (como R), mas você pode usar locale() para criar sua própria localidade que controla coisas como o fuso horário padrão, codificação, marca decimal, marca grande e nomes de dia e mês. na Vetor de caracteres de strings para interpretar como valores ausentes. Defina esta opção como character() para indicar que não há valores ausentes. trim_ws Os espaços em branco à esquerda e à direita (espaços e tabulações ASCII) devem ser cortados de cada campo antes de analisá-lo? skip Número de linhas para pular antes de ler os dados. n_max Número máximo de linhas a ler. guess_max Número máximo de linhas a serem usadas para adivinhar os tipos de coluna. show_col_types Se FALSE, não mostre os tipos de coluna adivinhados. Se TRUE sempre mostra os tipos de coluna, mesmo que sejam fornecidos. Se NULL (o padrão) mostrar apenas os tipos de coluna se eles não forem fornecidos explicitamente pelo argumento col_types. skip_empty_rows As linhas em branco devem ser ignoradas completamente? ou seja, se esta opção for TRUE, as linhas em branco não serão representadas. Se for FALSE, eles serão representados por valores NA em todas as colunas. 1.2.3 data.table::fread() Similar ao read.table e read.csv, só que mais rápido e conveniente por ler arquivos muito grandes. Todos os controles como sep, colClasses, nrows, encoding são detectados atuomaticamente. O resultado padrão é um objeto data.table, mas pode-se mudar para data.frame (documentação). Exemplo dados &lt;- data.table::fread(file = &#39;dados/dados.csv&#39;, # Caminho do arquivo select = c(&quot;data&quot;,&quot;muni&quot;,&quot;casos&quot;), # Seleciona colunas colClasses = c(data = &quot;Date&quot;, # Define classes muni = &quot;character&quot;, casos = &quot;integer&quot;), col.names = c(&quot;data.in.sin&quot;, # Renomeia colunas &quot;municipio&quot;, &quot;num_casos&quot;)) Argumentos principais Argumento Definição file Nome do arquivo no diretório de trabalho, caminho para o arquivo ou um URL começando http:, etc. Arquivos compactados ‘.gz’ e ‘.bz2’ são suportados se o pacote R.utils estiver instalado. sep O separador entre colunas. nrows Número máximo de linhas a serem lidas. header Logical. Primeria linha é o nome das colunas. na.strings Para ler NA, como NA, defina na.strings=“NA”. Para ler ,, como string em branco ““, defina na.strings=NULL. stringsAsFactors Converter todas as colunas de caracteres em fatores? skip skip &gt;0 ignora as primeiras linhas. skip=“string” procura por “string” no arquivo (por exemplo, uma substring da linha de nomes de coluna) e começa nessa linha (inspirada em read.xls no pacote gdata). select Um vetor de nomes de colunas ou números para manter e eliminar as demais. Pode especificar também tipos da mesma forma que colClasses; ou seja, um vetor de pares colname=type, ou uma lista de pares type=col(s). Em todas as formas de seleção, a ordem em que as colunas são especificadas determina a ordem das colunas no resultado. drop Vetor de nomes de colunas ou números a serem descartados, mantenha o resto. colClasses Pode receber um vetor ou lista nomeado especificando tipos para um subconjunto das colunas por nome. O padrão NULL significa que os tipos são inferidos automaticamente. Ex1 - colClasses = c(“Date”, “character”,“integer”), neste caso as classes vão compor as classes das colunas na ordem posta. Ex2 - colClasses = c(“data” = “Date”, “idade” = “integer”), nesse caso estou indicando as classes somente de algumas variaveis. Funciona também no read.csv2. dec Separador de decimal como em read.csv2. col.names Inserir um vetor de nomes para as colunas se quiser substituir os originais. Se houver alguma coluna original sem título (NA), ela será renomeada automaticamente com “V”+ o numero que corresponde no banco (V1,V2,V3). encoding Default is “unknown”. Outras possíveis opções são “UTF-8” e “Latin-1”. Porém, não é usado para recodificar, em vez disso, permite o manuseio de strings codificadas em sua codificação nativa. strip.white O padrão é TRUE. Retira espaços em branco à esquerda e à direita de campos não citados. Se FALSE, apenas os espaços à direita do cabeçalho serão removidos. fill Logical, o padrão é FALSE. Se TRUE, caso as linhas tenham comprimento desigual, os campos em branco serão preenchidos implicitamente. blank.lines.skip Logical, o padrão é FALSE. Se TRUE, as linhas em branco serão ignoradas. showProgress TRUE exibe o progresso no console se o ETA for maior que 3 segundos. data.table TRUE retorna um data.table (default). FALSE retorna um data.frame. O default para este argumento pode ser modificado com opcões(datatable.fread.datatable=FALSE). nThread Número de threads a serem usados. Experimente para ver o que funciona melhor para seus dados em seu hardware. KeepLeadingZeros Se for TRUE, dados numéricos com zeros à esquerda seão lidos como caracterer, caso contrário, os zeros à esquerda serão removidos e convertidos em numéricos. 1.2.4 readODS::read_ods() Função para leitura de arquivos no formato .ods do Libre Office. A leitura é feita em somente uma planilha, retorna um data.frame e costuma ser um pouco mais lenta comparada aos outros formatos (documentação). Exemplo dados &lt;- readODS::read_ods(path = &#39;dados/planilha_ods.ods&#39;, # Caminho do arquivo col_names = FALSE, # Primeira linha contém nomes das colunas sheet = 1, # Seleção da planilha range = &quot;A7:B14&quot;) # Intervalo para leitura Argumentos principais Argumento Definição path Caminho do arquivo ods. sheet Planilha que será lida. Default e 1. Pode ser o nome da planilha (ex. “semana1”) ou um número correspondente a planilha. col_names Indica se a primeira linha contem os nomes das colunas. skip Número de linhas a pular antes de iniciar a leitura dos dados. formula_as_formula Exibir fórmulas como fórmulas “SUM(A1:A3)” ou como valores “3” ou “8”. range Seleção de retângulo usando intervalo de células semelhante ao Excel, como intervalo = “D12:F15” ou intervalo = “R1C12:R6C15”. O processamento de intervalo de células é tratado pelo pacote cellranger. row_names Indica se o arquivo contém os nomes das linhas na primeira coluna. strings_as_factors Logical. Se variáveis tipo character serão convertidas a fatores. 1.2.5 readxl::read_excel() Leitura de arquivos com extensão .xls e xlsx, lidos pelo Excel e Libre Office. Por padrão, a sheet 1 é lida se não houver definição (documentação). Exemplo dados &lt;- readxl::read_excel(path = &quot;dados/planilha_xlsx.xlsx&quot;, sheet = 1, # seleciona a planilha 1 col_names = c(&#39;vel&#39;,&#39;dist&#39;), # seleciona colunas (não renomeia) col_types = c(&quot;numeric&quot;,&quot;numeric&quot;), # define a classe range = &quot;A3:B19&quot;) # define intervalo de leitura da planilha Argumentos principais Argumento Definição path Caminho para o arquivo xls/xlsx. sheet Planilha a ser lida. Aceita o nome da planilha ou o número correspondente. Default é a primeira planilha. reange Intervalo de células para leitura, ex. “B3:D87” ou “Orçamento!B2:G14”. col_names Se TRUE a primeira linha será usada para nomear as colunas. FALSE o número das colunas será uma sequência automática de X1 a Xn, ou um vetor de nomes para cada coluna. col_types Se NULL os tipos de classes serão adivinhados, senão inserir um vetor indicando as classes “blank”, “numeric”, “date” or “text”. na Valores ausentes. Por default o readxl converte celulas em branco para valores ausentes. Pode-se inserir um valor padrão caso se deseje cobrir os valores ausentes. skip Número de linhas para pular antes de iniciar a leitura dos dados. n_max Número máximo de linhas a serem lidas. guess_max Máximo de linhas utilizados para adivinhar classes das colunas. 1.2.6 foreign::read.dbf() A função le arquivos .dbf como dataframe, convertendo por default campos character em factor. Tem apenas dois argumentos, o file (caminho) e o as.is (se FALSE não converte os campos em factor). Por não ser muito usado, o desenvolvedor já alerta que nem todos os arquivos poderão ser lidos normalmente (documentação). Exemplo dados &lt;- foreign::read.dbf(file = &#39;dados/planilha_dbf.dbf&#39;) Argumentos principais Argumento Definição file O caminho para o arquivo DBF que você deseja ler. as.is Um valor lógico indicando se as strings devem ser retornadas como estão (sem conversão para fatores ou caracteres). as.data.frame Um valor lógico indicando se o resultado deve ser convertido em um objeto de classe data.frame. NA Um valor para representar valores ausentes no arquivo DBF. encoding A codificação dos caracteres no arquivo DBF. convert.factors Um valor lógico indicando se as colunas de fatores devem ser convertidas para caracteres. row.names Especifica se os nomes das linhas devem ser incluídos no resultado. blank.lines.skip Um valor lógico indicando se linhas em branco devem ser ignoradas. trim.blanks Um valor lógico indicando se espaços em branco devem ser removidos das strings. 1.2.7 rio::import() O rio é um pacote que vem com a iniciativa de simplificar o procedimento de importação e exportação de arquivos de dados. Na importação, é capaz de ler uma vasta lista de extensões de arquivos, sem a necessidade de especificar o formato (documentação). Exemplo dados &lt;- rio::import(file = &#39;dados/planilha_dbf.dbf&#39;) # Caminho e nome. Argumentos principais Argumento Definição file Caminho e nome do arquivo. Pode ter extensão .zip ou .tar. format Formato do arquivo. A definição é opcional, mas pode ser “,”, “;”, ” setclass Classe do objeto (opcional). Default é um “data.frame”. Os valores permitidos incluem “tbl_df”, “tbl” ou “tibble” (se estiver usando dplyr) ou “data.table” (se estiver usando data.table). Outros valores são ignorados, de modo que um data.frame é retornado. which Controla a importação de arquivos multi-objeto; como regra, import apenas retorna um único quadro de dados (use import_list para importar vários quadros de dados de um arquivo multi-objeto). Se o arquivo for um diretório compactado, que pode ser uma cadeia de caracteres especificando um nome de arquivo ou um número inteiro especificando qual arquivo (na ordem de classificação de localidade) extrair do diretório compactado. Para planilhas do Excel, isso pode ser usado para especificar um nome ou número de planilha. Para arquivos .Rdata, pode ser um nome de objeto. Para arquivos HTML, identifica qual tabela extrair (da ordem do documento). Ignorado de outra forma. Um valor de cadeia de caracteres será usado como uma expressão regular, de modo que o arquivo extraído seja a primeira correspondência da expressão regular com os nomes de arquivo no arquivo. 1.2.8 Arquivos da web Pode-se usar o endereço do apresentado no navegador ou contido nas propriedades (clicar com botão direito). O endereço deverá ser inserido entre aspas nos argumentos file ou path da maioria das funções de leitura, como no exemplo abaixo: read.csv2(file = &#39;https://raw.githubusercontent.com/seade-R/dados-covid-sp/master/data/dados_covid_sp.csv&#39;) # Ou atribuir o link à um objeto e usa-lo na função. link &lt;- &#39;https://raw.githubusercontent.com/seade-R/dados-covid-sp/master/data/dados_covid_sp.csv&#39; # É possível também baixar o arquivo (inclusive imagens) por meio da seguinte função: download.file(url = &#39;https://raw.githubusercontent.com/seade-R/dados-covid-sp/master/data/dados_covid_sp.csv&#39;, destfile = &#39;dados/baixado_web.csv&#39;) 1.2.9 Encoding Se houver distorção de caracteres especiais, considerar como possibilidades para resolver o problema utilizar o argumento correspondente a stringsAsFactors = F. Esse comando faz com que os caracteres permaneçam como caracteres, ao invés de serem convertidos para factor, e encoding = “UTF-8” ou encoding = “ISO-8859-1” para reconhecer os caracteres especiais. O argumento fileEncoding = “UTF-8” também pode ser necessário. Descobrir o encoding Verificar encoding de um vetor stringi::stri_enc_detect(str = cars$speed[1]) ## [[1]] ## Encoding Language Confidence ## 1 UTF-8 0.15 Converter encoding base::iconv(x = cars$speed[1:3], # Dataframe ou vetor from = &quot;UTF-8&quot;, # Encoding anterior to = &quot;ISO-8859-1&quot;) # Novo encoding ## [1] &quot;4&quot; &quot;4&quot; &quot;7&quot; Pode-se também utilizar a função base::enc2utf8 para transformar uma codificação em UTF-8, porém, deve ser sempre aplicado a um vetor (ou coluna do banco) de dados do tipo character, se for preciso, transformar antes com a função base::as.character dados &lt;- base::as.character(iris$Species) dados &lt;- base::enc2utf8(dados) Encoding via Import Dataset É possível controlar o encoding pelos argumentos da função escolhida para leitura do arquivo, ou então pela leitura realizada pela interface gráfica do RStudio. Entrar no menu “File”, “Import Dataset”, “From text (base)…” , após isso será aberta uma janela, onde o campo encoding permite selecionar uma codificação entre centenas. Veja figura abaixo: 1.3 Escrita de arquivos 1.3.1 utils::write.csv2() Função para salvar um arquivo de dados que foi trabalhado no R em diferentes formatos, no caso, separado por ponto e vírgula. Um ponto negativo é que essa função, ao salvar o arquivo, cria uma coluna com nomes das linhas (em números) (documentação). Exemplo write.csv2(x = iris, # Dados ativos file = &#39;dados/iris.csv&#39;, # Caminho e nome do arquivo fileEncoding = &quot;UTF-8&quot;) # Encoding read.csv2(&#39;dados/iris.csv&#39;, nrows = 4) ## X Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 1 5.1 3.5 1.4 0.2 setosa ## 2 2 4.9 3.0 1.4 0.2 setosa ## 3 3 4.7 3.2 1.3 0.2 setosa ## 4 4 4.6 3.1 1.5 0.2 setosa Argumentos principais Argumento Definição x Objeto a ser escrito, prefereincialmente uma matriz ou data.frame. file Nome do arquivo criado (pode conter o caminho) utilizando aspas ” “. append Logical. Se TRUE os dados serão adicionados à última linha de um arquivo já existente, que deve ter o nome descrito em file, se FALSE qualquer arquivo com o nome descrito será sobrescrito. na String usada para valores ausentes nos dados. dec String para definir divisor de decimal, ex. dec = “.”. col.names Logical. Indica se os nomes das colunas de x devem ser escritos junto com x, ou um vetor de caracteres dos nomes das colunas a serem escritos. row.names Logical. Cria coluna com nomes para linhas. fileEncoding String. Declara a codificação a ser usada para que possam ser recodificados à medida que são gravados. 1.3.2 readr::write_csv2() É semelhante à função anterior, mas executa a tarefa mais rápido, com a vantagem de não criar uma coluna com nomes das linhas (documentação). Exemplo readr::write_csv2(x = iris, file = &#39;dados/iris.csv&#39;) read.csv2(file = &#39;dados/iris.csv&#39;, nrows = 2) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa Argumentos principais Argumento Definição x Um data frame ou tibble a ser escrito. file Caminho, nome do arquivo e extensão. append Se FALSE, irá sobrescrever um arquivo existente, caso exista. Se TRUE, será salvo a partir da última linha de um arquivo existente. col_names Default TRUE. Primeira linha como nomes das colunas. Se FALSE, nomes das colunas não serão incluídos. 1.3.3 writexl::write_xlsx() Grava um dataframe em um arquivo xlsx. Para criar um xlsx com (várias) sheets nomeadas, basta definir x para uma lista nomeada de dataframe (documentação). Exemplo 1 writexl::write_xlsx(x = iris, path = &#39;dados/iris.xlsx&#39;, col_names = TRUE, format_headers = TRUE) readxl::read_excel(&#39;dados/iris.xlsx&#39;, n_max = 2) ## # A tibble: 2 × 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa Exemplo 2 writexl::write_xlsx(path = &quot;dados/conjuntodadosnativos.xlsx&quot;, x = list(sheet1=iris, sheet2=cars, sheet3=mtcars)) readxl::read_excel(path = &#39;dados/conjuntodadosnativos.xlsx&#39;, sheet = 3, n_max = 2) ## # A tibble: 2 × 11 ## mpg cyl disp hp drat wt qsec vs am gear carb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 21 6 160 110 3.9 2.62 16.5 0 1 4 4 ## 2 21 6 160 110 3.9 2.88 17.0 0 1 4 4 Argumentos principais Argumento Definição x Data frame ou lista de data frames que serão salvos em planilhas (sheets). path Nome do arquuivo criado. col_names Se TRUE, primera linha traz os nomes das colunas. format_headers Inserir nomes das colunas. 1.3.4 data.table::fwrite() Função para escrever .csv muito mais rápido (por exemplo, 2 segundos versus 1 minuto) e flexível. Máquinas modernas têm mais de uma CPU, então fwrite as usa; em todos os sistemas operacionais, incluindo Linux, Mac e Windows. Output em csv, csv2, tab, etc. (documentação). Exemplo dados &lt;- data.table::fread(file = &#39;dados/dados.csv&#39;, nrows = 20) data.table::fwrite(x = dados, # Objeto a ser escrito file = &#39;dados/dados20max.csv&#39;, # Nome e caminho (arquivo ja exite) append = TRUE, # Salva na ultima linha do arquivo ja existente sep = &#39;;&#39;, # Separados de colunas showProgress = TRUE) # Mostrar progresso Argumentos principais Argumento Definição x Objeto a salvar. Deve estar como data.frame ou data.table. file Nome do arquivo. append Se TRUE , o arquivo é salvo em acrescimo à última linha de um arquivo existente, sem incluir os nomes das colunas. sep Separador de colunas. Default é “,”. na Um string a ser usada para valores ausentes. O padrão é uma string em branco ““. dec Separador de decimal, default é “.”. row.names Nome das linhas. Usar somente se for data.frame, porque é incompatível com data.table.. col.names Primeira linha como nomes das colunas. logical01 Os valores lógicos devem ser escritos como 1 e 0 em vez de “TRUE” e “FALSE”? showProgress Exibir um medidor de progresso no console. Ignorado quando file == ““. compress Se compress = “auto” e se o arquivo termina em .gz, o formato de saída é gzipado csv. Se compress = “none”, o formato de saída é sempre csv. Se compress = “gzip”, o formato é csv compactado com gzip. A saída para o console nunca é compactada com gzip mesmo se compress = “gzip”. Por padrão, compress = “auto”. 1.3.5 rio::export() Semelhante a outros comandos de escrita de arquivos, o rio::export() permite gravar um data frame nos formatos habituais de texto. Para exportar uma lista de arquivos, usar o rio::export_list() (Documentação). Exempĺo rio::export(x = iris, # Objeto que será exportado. file = &#39;dados/iris.xlsx&#39;) # Caminho, nome e extensão. Argumentos principais Argumento Definição x Matriz ou data frame a ser escrita. Exceções são que x pode ser uma lista de dados se o formato de arquivo de saída for uma pasta de Excel .xlsx. Para exportar uma lista de quadros de dados para vários arquivos, use export_list em vez disso. file Nome do arquivo. Deve especificar file e/ou format. format Sequência de caracteres opcional contendo o formato de arquivo, que pode ser usado para substituir o formato inferido a partir de file ou, em vez de especificar file, um arquivo com o nome do símbolo de x e a extensão de arquivo especificada será criado. Os atalhos incluem: “,” ou “;” ou ” 1.4 Leitura de múltiplos arquivos Particularmente tenho maior interesse na possibilidade de ler e agrupar diversos arquivos, assim, o enfoque desse tópico será sobre a leitura com merge. 1.4.1 base::lapply() e base::Reduce A ideia aqui é fazer a leitura dos arquivos de interesse e juntá-los verticalmente compondo um dataframe final, assim, o método é dividido em três partes: 1. Listar os arquivos de interesse presentes no diretório. 2. Fazer leitura múltipla utilizando a função base::lapply e base::read.csv2 (pode ser outra) (documentação base::lapply). 3. Juntar os dataframes com base::Reduce e base::rbind.dataframe (ocumentação base::reduce()) Exemplo 1 setwd(&#39;arquivos/&#39;) # Define a pasta que contém os arquivos lista &lt;- base::list.files() # Captura os arquivos na pasta e atribui à uma lista arquivos &lt;- base::lapply(X = lista, # Lista com os arquivos a serem lidos FUN = read.csv2) # Função escolhida para ler unidos &lt;- base::Reduce(x = arquivos, # Lista de dataframes f = base::rbind.data.frame) # Função para empilhar setwd(&quot;~/Documentos/Estudos R/guia_de_bolso&quot;) # Volta para diretorio inicial O base::setwd() é mais importante neste caso por conta da atividade do base::lapply, que não tem um argumento path para definir espaço de trabalho, então o work directory tem que ser definido antes. A lista “arquivos” também pode ser aplicada à função data.table::rbindlist(), que terá o mesmo efeito da função elaborada no reduce. Exemplo 2 Aqui a ideia é realizar a leitura, mas filtrando os arquivos somente com os dados de interesse, ao mesmo tempo, para isso, vamos usar a função base::function() (documentação). Os parâmetros serão passados para essa função e ela será aplicada ao lapply. setwd(&#39;arquivos2/&#39;) filtro.fun &lt;- function(x){ # Cria uma função data.table::fread(file = x) %&gt;% dplyr::select(&quot;Petal.Length&quot;, # Manipulações &quot;Petal.Width&quot;, &quot;Species&quot;) %&gt;% dplyr::filter(Petal.Length &gt; .5) %&gt;% setNames(nm = c(&quot;compr&quot;,&quot;largura&quot;,&quot;especie&quot;)) } lista &lt;- list.files() arquivos &lt;- lapply(X = lista, FUN = filtro.fun) unidos &lt;- data.table::rbindlist(l = arquivos) # Mesmo efeito do Reduce setwd(&quot;~/Documentos/Estudos R/guia_de_bolso&quot;) # Volta para diretório inicial 1.4.2 base::for() A função for permite criar um loop de execução de determinada ação, no caso, o loop do exemplo realizará a leitura de vários arquivos que serão atribuidos à uma lista. Com a lista é possível empilhar em um único data frame. (documentação). Exemplo x &lt;- 1 # Objeto contador arquivos &lt;- list(rep(NA, 3)) # O objeto que vai receber a leitura individual dos arquivos, deve ser uma lista vazia lista &lt;- list.files(&#39;arquivos2/&#39;) # Lista com os arquivos a serem lidos for (i in lista) { # Para cada elemento da lista, executar: arquivos[[x]] &lt;- read.csv2(file = file.path(&#39;arquivos2&#39;,i)) %&gt;% # Cada elemento lido é adicionado a um espaço vazio da lista de arquivos filter(Sepal.Length &gt; 5.5) x &lt;- x + 1 # O contador define em que posição o arquivo lido será adicionado à lista de arquivos } data.table::rbindlist(l = arquivos)[1:3,] ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1: 5.8 4 1.2 0.2 setosa ## 2: 5.7 4.4 1.5 0.4 setosa ## 3: 5.7 3.8 1.7 0.3 setosa 1.4.3 rio::import_list() Importa uma lista de data frames de um vetor de nomes ou arquivo multi-objeto (planilha Excel, arquivo .Rdata etc) (documentação). Exemplo setwd(&#39;arquivos/&#39;) lista &lt;- list.files() unidos &lt;- rio::import_list(file = lista, # Lista com nomes dos arquivos do diretório rbind = TRUE, # Empilhar. Se FALSE retorna uma lista com os data frames header = TRUE) # Nomes das colunas setwd(&quot;~/Documentos/Estudos R/guia_de_bolso&quot;) 1.5 Escrita de múltiplos arquivos 1.5.1 rio::export_list() Exporta uma lista de data frames. A extensão colocada no nome do arquivo já direciona o formato, porém, pode-se usar o argumento sep = “;” ou outro para definir o desejado. Os nomes dos arquivos salvos podem ser declarados por um ou múltiplos verotes, ex. c(“iris1.csv”,“iris2.csv”), ou usar o recurso %s, ex. %s.csv que designa o nome do objeto como nome do arquivo que será criado (nome_do_objeto.csv) (documentação) Exemplo rio::export_list(x = list(iris1 = iris[1:30,], # Lista nomeada dos objetos a serem salvos iris2 = iris[60:80,], iris3 = iris[50:70,]), file = &#39;arquivos2/%s.csv&#39;, # Caminho. Nome do arquivo contido em %s automaticamente sep=&quot;;&quot;) # Separador "]]
